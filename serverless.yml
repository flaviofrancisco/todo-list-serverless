service:
  name: todo-list-app

plugins:
  - serverless-webpack
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-iam-roles-per-function    

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  environment:
    TODOS_TABLE: todos-${self:provider.stage}  
    USER_ID_INDEX: UserIdIndex

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:PutItem        
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}             

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: To do list API
        description: Serverless application for create to do list
    models:
      - name: CreateTodoItemRequest
        contentType: application/json
        schema: ${file(models/create-todo-request.json)}

functions:
  GetTodoList:
    handler: src/todo-list/lambda/http/getTodoList.handler
    events:
      - http:
          method: get
          path: todos
          cors: true          
          documentation:
            summary: Gets a list of to do tasks.
            descriptions: Fetches a list of things to do.

  CreateTodoList:
    handler: src/todo-list/lambda/http/createTodoItem.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new to do item.
            descriptions: Using this method you can create a new to do task.
            requestModels:
              'application/json' : CreateTodoItemRequest  

resources:
  Resources:
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S            
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: userId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL        